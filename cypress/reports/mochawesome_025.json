{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2025-08-29T07:38:24.614Z",
    "end": "2025-08-29T07:38:26.075Z",
    "duration": 1461,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "33a72a9c-7f9c-4530-b732-97cd5bd2d442",
      "title": "",
      "fullFile": "cypress/e2e/network-dynamic-stub.cy.js",
      "file": "cypress/e2e/network-dynamic-stub.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f10cf7ab-d364-47b7-9595-cb144f8885df",
          "title": "Dynamic stubbing of GET requests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "returns different responses depending on URL id",
              "fullTitle": "Dynamic stubbing of GET requests returns different responses depending on URL id",
              "timedOut": null,
              "duration": 303,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('https://example.cypress.io/commands/network-requests');\ncy.intercept('GET', '**/comments/*', req => {\n  const id = req.url.split('/').pop();\n  if (id === '1') {\n    req.reply({\n      statusCode: 200,\n      body: {\n        id: 1,\n        name: 'QA Bot',\n        body: 'First stubbed comment'\n      }\n    });\n  } else if (id === '2') {\n    req.reply({\n      statusCode: 200,\n      body: {\n        id: 2,\n        name: 'QA Bot',\n        body: 'Second stubbed comment'\n      }\n    });\n  } else {\n    req.reply({\n      statusCode: 200,\n      body: {\n        id,\n        name: 'QA Bot',\n        body: 'Fallback stub'\n      }\n    });\n  }\n}).as('getComment');\ncy.contains('Get Comment').click();\ncy.wait('@getComment').its('response.statusCode').should('eq', 200);\ncy.get('.network-comment').invoke('text').then(text => {\n  const t = text.trim();\n  expect(/First stubbed comment|Second stubbed comment|Fallback stub/.test(t), `unexpected text: \"${t}\"`).to.be.true;\n});",
              "err": {},
              "uuid": "4c49f087-21d4-409c-952a-a5aa79a45874",
              "parentUUID": "f10cf7ab-d364-47b7-9595-cb144f8885df",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4c49f087-21d4-409c-952a-a5aa79a45874"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 303,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}